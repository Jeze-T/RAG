### 1-Overview
  
RAG的流程是什么样子的？

用户问问题--找索引--检索到相关文档--和用户问题一起给LLM--LLM生成回答
  
### 2-Indexing
  
第一节的Indexing工作流程是什么？
  
什么是HNSW算法，和余弦相似度有什么关系？
  
https://zhuanlan.zhihu.com/p/673027535[1]
  
GPT解释：
  
>HNSW算法（Hierarchical Navigable Small World 分层可导航小世界）是一种高效的近似最近邻搜索（Approximate Nearest Neighbor, ANN）算法，特别适用于高维向量空间中的相似性搜索问题。它通过构建分层图结构来快速搜索高维数据中相似的向量。与传统的暴力搜索（即直接计算所有点之间的距离）相比，HNSW可以大大加快搜索速度，同时保持较高的准确度。
  
>HNSW算法的核心概念：
  
>层次化小世界图： HNSW 构建了一个分层的图结构，最顶层的图节点较少且稀疏，而越往底层节点越多且密集。层次化的结构使得搜索从较高层次开始，能够迅速缩小候选范围，再在底层进行更细粒度的搜索。
  
上层图：较稀疏，帮助快速找到初步的相似区域。
  
底层图：较密集，保证精确搜索最近邻。
  
>图的构建： HNSW图是动态构建的，每个向量加入时，HNSW会根据已有的图结构，选择与新向量相似的一些节点，形成连接边，最终构成近似的小世界网络（small-world graph）。这种图的结构具有较强的连通性和小世界特性，使得搜索效率很高。
  
>搜索过程： 搜索从高层次图开始，通过找到与查询点最相似的顶层节点，逐步下降到底层图。每个层中，HNSW通过邻近节点的遍历来找到与查询点最近的节点，逐层缩小搜索范围，直到找到最相似的候选结果。
  
>与余弦相似度的关系：余弦相似度是衡量两个向量之间相似性的一种度量方法，通常用于高维空间中的文本、图像、嵌入向量等相似性比较。余弦相似度的公式如下：[图片]其中 A 和 B 是两个向量，分子是它们的点积，分母是它们的模的乘积。余弦相似度的值在 [-1, 1]之间，值越大表示两个向量越相似。
  
>HNSW与余弦相似度的结合：
  
HNSW 算法本身并不限定使用哪种相似性度量，它能够支持多种距离度量方法，包括欧氏距离、余弦相似度、杰卡德距离等。具体应用中，余弦相似度可以作为HNSW中度量向量相似性的一种方法。
  
在使用余弦相似度的场景下，HNSW通过快速查找高维空间中与查询向量在余弦相似度上接近的向量，并避免了暴力搜索的高昂计算成本。
  
>HNSW与余弦相似度的优势：
  
高效性：
  
传统计算余弦相似度需要与每个数据点进行点积运算，时间复杂度为 O(n)，对于大规模数据集来说代价非常高。HNSW通过图结构大大减少了需要计算的候选点数，典型的时间复杂度可以达到接近常数级别 O(log⁡n)。
  
高维数据的近似搜索：HNSW适合在高维空间（如词向量、图像特征、嵌入向量）中进行近似搜索，而余弦相似度是这些高维数据常用的相似性度量之一。HNSW能够快速找到与查询点余弦相似度最大的向量。
  
>HNSW的应用场景：
  
推荐系统：
  
在推荐系统中，通过向量化的用户行为或商品特征，使用HNSW结合余弦相似度进行快速推荐相似用户或相似商品。
  
文本检索：在文本嵌入向量空间中，HNSW加速基于余弦相似度的检索任务，例如相似文本、文档的快速查找。
  
图像检索：在图像嵌入特征空间中，通过余弦相似度找到相似的图像，HNSW帮助提高检索效率。
  
>总结：
  
HNSW算法通过构建层次化的小世界图，能够快速在高维空间中进行近似最近邻搜索。当与余弦相似度结合使用时，HNSW能够有效加速相似向量的查找过程，广泛应用于需要高维特征相似性度量的场景中，如推荐系统、文本检索和图像检索等。
  
### 3-Retrival
  
如何通过矢量检索相似的内容？
  
### 4-Generation
  
3中找到了与问题相似的上下文，如何使用LLM生成答案？

将检索到相关文档和用户问题一起当做prompt给LLM，LLM生成回答
